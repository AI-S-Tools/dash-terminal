id: t2-3-terminal-wrapper
title: 'T2.3: Concrete Integrated Frontend (TS)'
project_id: dash-terminal
phase_id: p2-core-functionality
status: todo
priority: high
reporter: dppm-user
created: "2025-09-25"
updated: "2025-09-25"
first: "go through this task description and make a complete local tasklist before you start."
completion: "completion is set by status: done"
dependency_ids: ["t1-2-pwa-foundation", "t2-1-websocket-handler"]
description: |
  ## T2.3: Concrete Integrated Frontend (TypeScript)

  **GOAL:** Implement a concrete, non-mocked frontend in TypeScript. The UI flow must force the user to select an LXC container before interacting with tmux, ensuring true end-to-end integration.

  **CONCRETE REQUIREMENTS:**

  **1. Project Setup:**
     - The project MUST be set up with TypeScript in a `/src` directory, building a single `bundle.js` to `/web/js/`.
     - Dependencies (`typescript`, `xterm`, `esbuild`) MUST be installed via `npm`.

  **2. UI Flow & State Management:**
     - **On Application Load:**
       - The application MUST send an `lxc_list` message via WebSocket.
       - It MUST display a list of LXC containers received from the backend. The tmux view MUST be hidden.
     - **On Container Selection:**
       - When a user clicks a container, the app MUST store the selected `container_id`.
       - It MUST then send a `session_list` message, including the selected `container_id`.
     - **On Receiving Session List:**
       - The app MUST dynamically render tabs for the tmux sessions belonging to the selected container.
       - The terminal view becomes visible.
     - **On Session/Window Click:**
       - A `session_select` or `window_select` message MUST be sent, including the active `container_id`.

  **3. Terminal Implementation:**
     - A dictionary of `xterm.js` instances MUST be maintained, keyed by session ID, to ensure session isolation.
     - All terminal I/O (`terminal_input`, `terminal_output` messages) MUST be piped directly between the xterm instance and the WebSocket without any mocking or interception.

  **VERIFICATION (No Mocks):**
  - **Build Verification:** `npm run build` must successfully create `/web/js/bundle.js`.
  - **End-to-End Test Plan:**
    1.  Start the application.
    2.  **Assert:** A list of actual LXC containers from the backend is displayed.
    3.  Select a container.
    4.  **Assert:** A list of actual tmux sessions *from within that container* is displayed as tabs.
    5.  Select a session tab.
    6.  Type `ls /` in the terminal.
    7.  **Assert:** The output in xterm.js is the root filesystem of the *selected LXC container*, not the host.

  **ðŸŽ¯ SUCCESS CRITERIA:**
  - The UI is 100% driven by real backend data (no dummy tabs, no hardcoded lists).
  - User interaction is strictly sequential: Container selection -> Tmux session selection -> Terminal interaction.
  - The terminal view is a direct, real-time PTY stream from the selected container's tmux session.
