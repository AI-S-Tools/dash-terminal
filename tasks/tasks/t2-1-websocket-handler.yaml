id: t2-1-websocket-handler
title: 'T2.1: Concrete, Context-Aware WebSocket Router'
project_id: dash-terminal
phase_id: p2-core-functionality
status: todo
priority: critical
reporter: dppm-user
created: "2025-09-25"
updated: "2025-09-25"
first: "go through this task description and make a complete local tasklist before you start."
completion: "completion is set by status: done"
dependency_ids: ["t1-1-project-setup", "t1-4-tmux-websocket-protocol", "t2-4-native-tmux-manager"]
description: |
  ## T2.1: Concrete, Context-Aware WebSocket Router

  **GOAL:** Implement a concrete, non-mocked WebSocket routing layer that is fully aware of the application's state, including the selected LXC container for each client.

  **CONCRETE REQUIREMENTS:**

  **1. Client State Management:**
     - A `Client` struct MUST be implemented to track the state for each connection.
     - This struct MUST hold, at a minimum:
       - The WebSocket connection (`*websocket.Conn`).
       - The selected Container ID (`container_id`).
       - The selected Tmux Session ID (`tmux_session_id`).
     - A thread-safe map of these clients MUST be maintained.

  **2. Message Routing Logic:**
     - The handler MUST parse incoming messages and route them based on `type`.
     - **`lxc_list`:**
       - This message type MUST be handled.
       - It MUST call the `LxcManager.ListContainers()` function and send the result back to the client.
     - **`session_list`:**
       - The handler MUST expect a `container_id` in the message payload.
       - It MUST update the `container_id` in the client's state.
       - It MUST then call the `TmuxManager` with the `container_id`.
     - **All other messages (`session_select`, `terminal_input`, etc.):**
       - The handler MUST retrieve the `container_id` from the client's state and pass it to every call to the `TmuxManager`.
       - It is an error if the client sends these messages before a `container_id` has been set.

  **3. I/O Forwarding:**
     - The handler MUST be able to receive PTY output from the `TmuxManager` (which includes container/session context) and forward it precisely to the correct client's WebSocket connection.

  **VERIFICATION:**
  - This task's success is verified by the concrete, end-to-end integration tests defined in `t2-3` (frontend manual test) and `t2-4` (backend automated test). If those tests pass, this routing layer is confirmed to be working correctly.

  **ðŸŽ¯ SUCCESS CRITERIA:**
  - The router correctly handles the full, sequential lifecycle of a user connection: `lxc_list` -> `session_list` (with container_id) -> `session_select` -> `terminal_input`.
  - The state (`container_id`, `tmux_session_id`) is reliably maintained for each client.
  - No `TmuxManager` function is ever called without the required `container_id` context.
